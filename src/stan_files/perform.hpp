/*
    performr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    performr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with performr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_perform_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_perform");
    reader.add_event(162, 160, "end", "model_perform");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
perform_mu(const T0__& xs,
               const T1__& shape1,
               const T2__& shape2,
               const T3__& stretch,
               const T4__& x_min,
               const T5__& x_max, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ x(DUMMY_VAR__);
        (void) x;  // dummy to suppress unused var warning
        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x, DUMMY_VAR__);
        stan::math::assign(x,((xs - x_min) / (x_max - x_min)));


        current_statement_begin__ = 5;
        if (as_bool((primitive_value(logical_gt(x, 0)) && primitive_value(logical_lt(x, 1))))) {

            current_statement_begin__ = 6;
            return stan::math::promote_scalar<fun_return_scalar_t__>(((((stan::math::log(stretch) + stan::math::log(shape1)) + stan::math::log(shape2)) + ((shape1 - 1) * stan::math::log(x))) + ((shape2 - 1) * log1m(pow(x, shape1)))));
        } else {

            current_statement_begin__ = 12;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct perform_mu_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& xs,
               const T1__& shape1,
               const T2__& shape2,
               const T3__& stretch,
               const T4__& x_min,
               const T5__& x_max, std::ostream* pstream__) const {
        return perform_mu(xs, shape1, shape2, stretch, x_min, x_max, pstream__);
    }
};

#include <meta_header.hpp>
 class model_perform : public prob_grad {
private:
        int N;
        int n_species;
        std::vector<int> species_int;
        std::vector<double> y;
        std::vector<double> x;
        double shape1_pr_mu;
        double shape1_pr_sig;
        double shape2_pr_mu;
        double shape2_pr_sig;
        double stretch_pr_mu;
        double stretch_pr_sig;
        double min_pr_mu;
        double min_pr_sig;
        double max_pr_mu;
        double max_pr_sig;
        double pr_beta0;
        double pr_beta1;
        double nu_pr_shape;
        double nu_pr_scale;
public:
    model_perform(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_perform(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_perform_namespace::model_perform";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n_species", "int", context__.to_vec());
            n_species = int(0);
            vals_i__ = context__.vals_i("n_species");
            pos__ = 0;
            n_species = vals_i__[pos__++];

            current_statement_begin__ = 20;
            validate_non_negative_index("species_int", "N", N);
            context__.validate_dims("data initialization", "species_int", "int", context__.to_vec(N));
            species_int = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("species_int");
            pos__ = 0;
            size_t species_int_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < species_int_k_0_max__; ++k_0__) {
                species_int[k_0__] = vals_i__[pos__++];
            }
            size_t species_int_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < species_int_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "species_int[i_0__]", species_int[i_0__], 1);
            }

            current_statement_begin__ = 21;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            y = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            size_t y_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
            }

            current_statement_begin__ = 22;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(N));
            x = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                x[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "shape1_pr_mu", "double", context__.to_vec());
            shape1_pr_mu = double(0);
            vals_r__ = context__.vals_r("shape1_pr_mu");
            pos__ = 0;
            shape1_pr_mu = vals_r__[pos__++];

            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "shape1_pr_sig", "double", context__.to_vec());
            shape1_pr_sig = double(0);
            vals_r__ = context__.vals_r("shape1_pr_sig");
            pos__ = 0;
            shape1_pr_sig = vals_r__[pos__++];

            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "shape2_pr_mu", "double", context__.to_vec());
            shape2_pr_mu = double(0);
            vals_r__ = context__.vals_r("shape2_pr_mu");
            pos__ = 0;
            shape2_pr_mu = vals_r__[pos__++];

            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "shape2_pr_sig", "double", context__.to_vec());
            shape2_pr_sig = double(0);
            vals_r__ = context__.vals_r("shape2_pr_sig");
            pos__ = 0;
            shape2_pr_sig = vals_r__[pos__++];

            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "stretch_pr_mu", "double", context__.to_vec());
            stretch_pr_mu = double(0);
            vals_r__ = context__.vals_r("stretch_pr_mu");
            pos__ = 0;
            stretch_pr_mu = vals_r__[pos__++];

            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "stretch_pr_sig", "double", context__.to_vec());
            stretch_pr_sig = double(0);
            vals_r__ = context__.vals_r("stretch_pr_sig");
            pos__ = 0;
            stretch_pr_sig = vals_r__[pos__++];

            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "min_pr_mu", "double", context__.to_vec());
            min_pr_mu = double(0);
            vals_r__ = context__.vals_r("min_pr_mu");
            pos__ = 0;
            min_pr_mu = vals_r__[pos__++];

            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "min_pr_sig", "double", context__.to_vec());
            min_pr_sig = double(0);
            vals_r__ = context__.vals_r("min_pr_sig");
            pos__ = 0;
            min_pr_sig = vals_r__[pos__++];

            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "max_pr_mu", "double", context__.to_vec());
            max_pr_mu = double(0);
            vals_r__ = context__.vals_r("max_pr_mu");
            pos__ = 0;
            max_pr_mu = vals_r__[pos__++];

            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "max_pr_sig", "double", context__.to_vec());
            max_pr_sig = double(0);
            vals_r__ = context__.vals_r("max_pr_sig");
            pos__ = 0;
            max_pr_sig = vals_r__[pos__++];

            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "pr_beta0", "double", context__.to_vec());
            pr_beta0 = double(0);
            vals_r__ = context__.vals_r("pr_beta0");
            pos__ = 0;
            pr_beta0 = vals_r__[pos__++];

            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "pr_beta1", "double", context__.to_vec());
            pr_beta1 = double(0);
            vals_r__ = context__.vals_r("pr_beta1");
            pos__ = 0;
            pr_beta1 = vals_r__[pos__++];

            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "nu_pr_shape", "double", context__.to_vec());
            nu_pr_shape = double(0);
            vals_r__ = context__.vals_r("nu_pr_shape");
            pos__ = 0;
            nu_pr_shape = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu_pr_shape", nu_pr_shape, 0);

            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "nu_pr_scale", "double", context__.to_vec());
            nu_pr_scale = double(0);
            vals_r__ = context__.vals_r("nu_pr_scale");
            pos__ = 0;
            nu_pr_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu_pr_scale", nu_pr_scale, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 44;
            validate_non_negative_index("shape1", "n_species", n_species);
            num_params_r__ += n_species;
            current_statement_begin__ = 45;
            validate_non_negative_index("shape2", "n_species", n_species);
            num_params_r__ += n_species;
            current_statement_begin__ = 46;
            validate_non_negative_index("stretch", "n_species", n_species);
            num_params_r__ += n_species;
            current_statement_begin__ = 47;
            validate_non_negative_index("min_max", "2", 2);
            validate_non_negative_index("min_max", "n_species", n_species);
            num_params_r__ += (2 * n_species);
            current_statement_begin__ = 48;
            validate_non_negative_index("nu", "n_species", n_species);
            num_params_r__ += n_species;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
            current_statement_begin__ = 51;
            num_params_r__ += 1;
            current_statement_begin__ = 52;
            num_params_r__ += 1;
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 56;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            num_params_r__ += 1;
            current_statement_begin__ = 61;
            num_params_r__ += 1;
            current_statement_begin__ = 62;
            validate_non_negative_index("beta_0", "n_species", n_species);
            num_params_r__ += (1 * n_species);
            current_statement_begin__ = 63;
            validate_non_negative_index("beta_1", "n_species", n_species);
            num_params_r__ += (1 * n_species);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_perform() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 44;
        if (!(context__.contains_r("shape1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable shape1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("shape1");
        pos__ = 0U;
        validate_non_negative_index("shape1", "n_species", n_species);
        context__.validate_dims("parameter initialization", "shape1", "vector_d", context__.to_vec(n_species));
        Eigen::Matrix<double, Eigen::Dynamic, 1> shape1(n_species);
        size_t shape1_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape1_j_1_max__; ++j_1__) {
            shape1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(2, shape1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable shape1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 45;
        if (!(context__.contains_r("shape2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable shape2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("shape2");
        pos__ = 0U;
        validate_non_negative_index("shape2", "n_species", n_species);
        context__.validate_dims("parameter initialization", "shape2", "vector_d", context__.to_vec(n_species));
        Eigen::Matrix<double, Eigen::Dynamic, 1> shape2(n_species);
        size_t shape2_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape2_j_1_max__; ++j_1__) {
            shape2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(2, shape2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable shape2: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 46;
        if (!(context__.contains_r("stretch")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable stretch missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("stretch");
        pos__ = 0U;
        validate_non_negative_index("stretch", "n_species", n_species);
        context__.validate_dims("parameter initialization", "stretch", "vector_d", context__.to_vec(n_species));
        Eigen::Matrix<double, Eigen::Dynamic, 1> stretch(n_species);
        size_t stretch_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < stretch_j_1_max__; ++j_1__) {
            stretch(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, stretch);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable stretch: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 47;
        if (!(context__.contains_r("min_max")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable min_max missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("min_max");
        pos__ = 0U;
        validate_non_negative_index("min_max", "2", 2);
        validate_non_negative_index("min_max", "n_species", n_species);
        context__.validate_dims("parameter initialization", "min_max", "vector_d", context__.to_vec(n_species,2));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > min_max(n_species, Eigen::Matrix<double, Eigen::Dynamic, 1>(2));
        size_t min_max_j_1_max__ = 2;
        size_t min_max_k_0_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < min_max_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < min_max_k_0_max__; ++k_0__) {
                min_max[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t min_max_i_0_max__ = n_species;
        for (size_t i_0__ = 0; i_0__ < min_max_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(min_max[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable min_max: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 48;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "n_species", n_species);
        context__.validate_dims("parameter initialization", "nu", "vector_d", context__.to_vec(n_species));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu(n_species);
        size_t nu_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            nu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 50;
        if (!(context__.contains_r("mu_shape1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_shape1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_shape1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_shape1", "double", context__.to_vec());
        double mu_shape1(0);
        mu_shape1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_shape1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_shape1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 51;
        if (!(context__.contains_r("mu_shape2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_shape2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_shape2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_shape2", "double", context__.to_vec());
        double mu_shape2(0);
        mu_shape2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_shape2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_shape2: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 52;
        if (!(context__.contains_r("mu_stretch")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_stretch missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_stretch");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_stretch", "double", context__.to_vec());
        double mu_stretch(0);
        mu_stretch = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_stretch);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_stretch: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 54;
        if (!(context__.contains_r("mu_min")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_min missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_min");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_min", "double", context__.to_vec());
        double mu_min(0);
        mu_min = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_min);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_min: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 55;
        if (!(context__.contains_r("mu_max")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_max missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_max");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_max", "double", context__.to_vec());
        double mu_max(0);
        mu_max = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_max);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_max: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 56;
        if (!(context__.contains_r("mu_nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_nu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_nu", "double", context__.to_vec());
        double mu_nu(0);
        mu_nu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mu_nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 60;
        if (!(context__.contains_r("mu_beta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_beta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_beta0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_beta0", "double", context__.to_vec());
        double mu_beta0(0);
        mu_beta0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_beta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_beta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 61;
        if (!(context__.contains_r("mu_beta1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_beta1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_beta1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_beta1", "double", context__.to_vec());
        double mu_beta1(0);
        mu_beta1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_beta1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_beta1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 62;
        if (!(context__.contains_r("beta_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_0");
        pos__ = 0U;
        validate_non_negative_index("beta_0", "n_species", n_species);
        context__.validate_dims("parameter initialization", "beta_0", "double", context__.to_vec(n_species));
        std::vector<double> beta_0(n_species, double(0));
        size_t beta_0_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_0_k_0_max__; ++k_0__) {
            beta_0[k_0__] = vals_r__[pos__++];
        }
        size_t beta_0_i_0_max__ = n_species;
        for (size_t i_0__ = 0; i_0__ < beta_0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(beta_0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 63;
        if (!(context__.contains_r("beta_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_1");
        pos__ = 0U;
        validate_non_negative_index("beta_1", "n_species", n_species);
        context__.validate_dims("parameter initialization", "beta_1", "double", context__.to_vec(n_species));
        std::vector<double> beta_1(n_species, double(0));
        size_t beta_1_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_1_k_0_max__; ++k_0__) {
            beta_1[k_0__] = vals_r__[pos__++];
        }
        size_t beta_1_i_0_max__ = n_species;
        for (size_t i_0__ = 0; i_0__ < beta_1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(beta_1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> shape1;
            (void) shape1;  // dummy to suppress unused var warning
            if (jacobian__)
                shape1 = in__.vector_lb_constrain(2, n_species, lp__);
            else
                shape1 = in__.vector_lb_constrain(2, n_species);

            current_statement_begin__ = 45;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> shape2;
            (void) shape2;  // dummy to suppress unused var warning
            if (jacobian__)
                shape2 = in__.vector_lb_constrain(2, n_species, lp__);
            else
                shape2 = in__.vector_lb_constrain(2, n_species);

            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> stretch;
            (void) stretch;  // dummy to suppress unused var warning
            if (jacobian__)
                stretch = in__.vector_lb_constrain(0, n_species, lp__);
            else
                stretch = in__.vector_lb_constrain(0, n_species);

            current_statement_begin__ = 47;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > min_max;
            size_t min_max_d_0_max__ = n_species;
            min_max.reserve(min_max_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < min_max_d_0_max__; ++d_0__) {
                if (jacobian__)
                    min_max.push_back(in__.ordered_constrain(2, lp__));
                else
                    min_max.push_back(in__.ordered_constrain(2));
            }

            current_statement_begin__ = 48;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu;
            (void) nu;  // dummy to suppress unused var warning
            if (jacobian__)
                nu = in__.vector_lb_constrain(0, n_species, lp__);
            else
                nu = in__.vector_lb_constrain(0, n_species);

            current_statement_begin__ = 50;
            local_scalar_t__ mu_shape1;
            (void) mu_shape1;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_shape1 = in__.scalar_constrain(lp__);
            else
                mu_shape1 = in__.scalar_constrain();

            current_statement_begin__ = 51;
            local_scalar_t__ mu_shape2;
            (void) mu_shape2;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_shape2 = in__.scalar_constrain(lp__);
            else
                mu_shape2 = in__.scalar_constrain();

            current_statement_begin__ = 52;
            local_scalar_t__ mu_stretch;
            (void) mu_stretch;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_stretch = in__.scalar_constrain(lp__);
            else
                mu_stretch = in__.scalar_constrain();

            current_statement_begin__ = 54;
            local_scalar_t__ mu_min;
            (void) mu_min;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_min = in__.scalar_constrain(lp__);
            else
                mu_min = in__.scalar_constrain();

            current_statement_begin__ = 55;
            local_scalar_t__ mu_max;
            (void) mu_max;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_max = in__.scalar_constrain(lp__);
            else
                mu_max = in__.scalar_constrain();

            current_statement_begin__ = 56;
            local_scalar_t__ mu_nu;
            (void) mu_nu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_nu = in__.scalar_lb_constrain(0, lp__);
            else
                mu_nu = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 60;
            local_scalar_t__ mu_beta0;
            (void) mu_beta0;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_beta0 = in__.scalar_constrain(lp__);
            else
                mu_beta0 = in__.scalar_constrain();

            current_statement_begin__ = 61;
            local_scalar_t__ mu_beta1;
            (void) mu_beta1;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_beta1 = in__.scalar_constrain(lp__);
            else
                mu_beta1 = in__.scalar_constrain();

            current_statement_begin__ = 62;
            std::vector<local_scalar_t__> beta_0;
            size_t beta_0_d_0_max__ = n_species;
            beta_0.reserve(beta_0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_0.push_back(in__.scalar_constrain(lp__));
                else
                    beta_0.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 63;
            std::vector<local_scalar_t__> beta_1;
            size_t beta_1_d_0_max__ = n_species;
            beta_1.reserve(beta_1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_1.push_back(in__.scalar_constrain(lp__));
                else
                    beta_1.push_back(in__.scalar_constrain());
            }

            // transformed parameters
            current_statement_begin__ = 72;
            validate_non_negative_index("x_min", "n_species", n_species);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_min(n_species);
            stan::math::initialize(x_min, DUMMY_VAR__);
            stan::math::fill(x_min, DUMMY_VAR__);

            current_statement_begin__ = 73;
            validate_non_negative_index("x_max", "n_species", n_species);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_max(n_species);
            stan::math::initialize(x_max, DUMMY_VAR__);
            stan::math::fill(x_max, DUMMY_VAR__);

            current_statement_begin__ = 74;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);

            current_statement_begin__ = 75;
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 77;
            for (int i = 1; i <= n_species; ++i) {

                current_statement_begin__ = 78;
                stan::model::assign(x_min, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(get_base1(min_max, i, "min_max", 1), 1, "min_max", 2), 
                            "assigning variable x_min");
                current_statement_begin__ = 79;
                stan::model::assign(x_max, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(get_base1(min_max, i, "min_max", 1), 2, "min_max", 2), 
                            "assigning variable x_max");
            }
            current_statement_begin__ = 82;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 83;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::exp(perform_mu(get_base1(x, n, "x", 1), get_base1(shape1, get_base1(species_int, n, "species_int", 1), "shape1", 1), get_base1(shape2, get_base1(species_int, n, "species_int", 1), "shape2", 1), get_base1(stretch, get_base1(species_int, n, "species_int", 1), "stretch", 1), get_base1(x_min, get_base1(species_int, n, "species_int", 1), "x_min", 1), get_base1(x_max, get_base1(species_int, n, "species_int", 1), "x_max", 1), pstream__)), 
                            "assigning variable mu");
                current_statement_begin__ = 90;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            inv_logit((get_base1(beta_0, get_base1(species_int, n, "species_int", 1), "beta_0", 1) + (get_base1(beta_1, get_base1(species_int, n, "species_int", 1), "beta_1", 1) * get_base1(mu, n, "mu", 1)))), 
                            "assigning variable theta");
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 72;
            size_t x_min_j_1_max__ = n_species;
            for (size_t j_1__ = 0; j_1__ < x_min_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(x_min(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x_min" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x_min: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 73;
            size_t x_max_j_1_max__ = n_species;
            for (size_t j_1__ = 0; j_1__ < x_max_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(x_max(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x_max" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x_max: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 74;
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 75;
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 97;
            lp_accum__.add(normal_log<propto__>(mu_shape1, shape1_pr_mu, shape1_pr_sig));
            current_statement_begin__ = 98;
            lp_accum__.add(normal_log<propto__>(mu_shape2, shape2_pr_mu, shape2_pr_sig));
            current_statement_begin__ = 99;
            lp_accum__.add(normal_log<propto__>(mu_stretch, stretch_pr_mu, stretch_pr_sig));
            current_statement_begin__ = 100;
            lp_accum__.add(normal_log<propto__>(mu_min, min_pr_mu, min_pr_sig));
            current_statement_begin__ = 101;
            lp_accum__.add(normal_log<propto__>(mu_max, max_pr_mu, max_pr_sig));
            current_statement_begin__ = 102;
            lp_accum__.add(normal_log<propto__>(mu_nu, nu_pr_scale, 1));
            current_statement_begin__ = 103;
            lp_accum__.add(gamma_log<propto__>(nu, nu_pr_shape, mu_nu));
            current_statement_begin__ = 104;
            lp_accum__.add(normal_log<propto__>(shape1, mu_shape1, 1));
            current_statement_begin__ = 105;
            lp_accum__.add(normal_log<propto__>(shape2, mu_shape2, 1));
            current_statement_begin__ = 106;
            lp_accum__.add(normal_log<propto__>(stretch, mu_stretch, 1));
            current_statement_begin__ = 109;
            lp_accum__.add(normal_log<propto__>(mu_beta0, pr_beta0, 1));
            current_statement_begin__ = 110;
            lp_accum__.add(normal_log<propto__>(mu_beta1, pr_beta1, 1));
            current_statement_begin__ = 111;
            lp_accum__.add(normal_log<propto__>(beta_0, mu_beta0, 1));
            current_statement_begin__ = 112;
            lp_accum__.add(normal_log<propto__>(beta_1, mu_beta1, 1));
            current_statement_begin__ = 115;
            for (int i = 1; i <= n_species; ++i) {

                current_statement_begin__ = 116;
                lp_accum__.add(normal_log<propto__>(get_base1(get_base1(min_max, i, "min_max", 1), 1, "min_max", 2), mu_min, 1));
                current_statement_begin__ = 117;
                lp_accum__.add(normal_log<propto__>(get_base1(get_base1(min_max, i, "min_max", 1), 2, "min_max", 2), mu_max, 1));
            }
            current_statement_begin__ = 121;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 123;
                if (as_bool(logical_eq(get_base1(y, n, "y", 1), 0))) {
                    current_statement_begin__ = 124;
                    lp_accum__.add(log_sum_exp(bernoulli_log(0, get_base1(theta, n, "theta", 1)), (bernoulli_log(1, get_base1(theta, n, "theta", 1)) + normal_log(get_base1(y, n, "y", 1), get_base1(mu, n, "mu", 1), (((1 + get_base1(mu, n, "mu", 1)) * 1) / get_base1(nu, get_base1(species_int, n, "species_int", 1), "nu", 1))))));
                } else {
                    current_statement_begin__ = 130;
                    lp_accum__.add((bernoulli_log(1, get_base1(theta, n, "theta", 1)) + normal_log(get_base1(y, n, "y", 1), get_base1(mu, n, "mu", 1), (((1 + get_base1(mu, n, "mu", 1)) * 1) / get_base1(nu, get_base1(species_int, n, "species_int", 1), "nu", 1)))));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("shape1");
        names__.push_back("shape2");
        names__.push_back("stretch");
        names__.push_back("min_max");
        names__.push_back("nu");
        names__.push_back("mu_shape1");
        names__.push_back("mu_shape2");
        names__.push_back("mu_stretch");
        names__.push_back("mu_min");
        names__.push_back("mu_max");
        names__.push_back("mu_nu");
        names__.push_back("mu_beta0");
        names__.push_back("mu_beta1");
        names__.push_back("beta_0");
        names__.push_back("beta_1");
        names__.push_back("x_min");
        names__.push_back("x_max");
        names__.push_back("mu");
        names__.push_back("theta");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_species);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_perform_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> shape1 = in__.vector_lb_constrain(2, n_species);
        size_t shape1_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape1_j_1_max__; ++j_1__) {
            vars__.push_back(shape1(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> shape2 = in__.vector_lb_constrain(2, n_species);
        size_t shape2_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape2_j_1_max__; ++j_1__) {
            vars__.push_back(shape2(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> stretch = in__.vector_lb_constrain(0, n_species);
        size_t stretch_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < stretch_j_1_max__; ++j_1__) {
            vars__.push_back(stretch(j_1__));
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > min_max;
        size_t min_max_d_0_max__ = n_species;
        min_max.reserve(min_max_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < min_max_d_0_max__; ++d_0__) {
            min_max.push_back(in__.ordered_constrain(2));
        }
        size_t min_max_j_1_max__ = 2;
        size_t min_max_k_0_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < min_max_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < min_max_k_0_max__; ++k_0__) {
                vars__.push_back(min_max[k_0__](j_1__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> nu = in__.vector_lb_constrain(0, n_species);
        size_t nu_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            vars__.push_back(nu(j_1__));
        }

        double mu_shape1 = in__.scalar_constrain();
        vars__.push_back(mu_shape1);

        double mu_shape2 = in__.scalar_constrain();
        vars__.push_back(mu_shape2);

        double mu_stretch = in__.scalar_constrain();
        vars__.push_back(mu_stretch);

        double mu_min = in__.scalar_constrain();
        vars__.push_back(mu_min);

        double mu_max = in__.scalar_constrain();
        vars__.push_back(mu_max);

        double mu_nu = in__.scalar_lb_constrain(0);
        vars__.push_back(mu_nu);

        double mu_beta0 = in__.scalar_constrain();
        vars__.push_back(mu_beta0);

        double mu_beta1 = in__.scalar_constrain();
        vars__.push_back(mu_beta1);

        std::vector<double> beta_0;
        size_t beta_0_d_0_max__ = n_species;
        beta_0.reserve(beta_0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_0_d_0_max__; ++d_0__) {
            beta_0.push_back(in__.scalar_constrain());
        }
        size_t beta_0_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_0_k_0_max__; ++k_0__) {
            vars__.push_back(beta_0[k_0__]);
        }

        std::vector<double> beta_1;
        size_t beta_1_d_0_max__ = n_species;
        beta_1.reserve(beta_1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_1_d_0_max__; ++d_0__) {
            beta_1.push_back(in__.scalar_constrain());
        }
        size_t beta_1_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_1_k_0_max__; ++k_0__) {
            vars__.push_back(beta_1[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 72;
            validate_non_negative_index("x_min", "n_species", n_species);
            Eigen::Matrix<double, Eigen::Dynamic, 1> x_min(n_species);
            stan::math::initialize(x_min, DUMMY_VAR__);
            stan::math::fill(x_min, DUMMY_VAR__);

            current_statement_begin__ = 73;
            validate_non_negative_index("x_max", "n_species", n_species);
            Eigen::Matrix<double, Eigen::Dynamic, 1> x_max(n_species);
            stan::math::initialize(x_max, DUMMY_VAR__);
            stan::math::fill(x_max, DUMMY_VAR__);

            current_statement_begin__ = 74;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);

            current_statement_begin__ = 75;
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 77;
            for (int i = 1; i <= n_species; ++i) {

                current_statement_begin__ = 78;
                stan::model::assign(x_min, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(get_base1(min_max, i, "min_max", 1), 1, "min_max", 2), 
                            "assigning variable x_min");
                current_statement_begin__ = 79;
                stan::model::assign(x_max, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(get_base1(min_max, i, "min_max", 1), 2, "min_max", 2), 
                            "assigning variable x_max");
            }
            current_statement_begin__ = 82;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 83;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::exp(perform_mu(get_base1(x, n, "x", 1), get_base1(shape1, get_base1(species_int, n, "species_int", 1), "shape1", 1), get_base1(shape2, get_base1(species_int, n, "species_int", 1), "shape2", 1), get_base1(stretch, get_base1(species_int, n, "species_int", 1), "stretch", 1), get_base1(x_min, get_base1(species_int, n, "species_int", 1), "x_min", 1), get_base1(x_max, get_base1(species_int, n, "species_int", 1), "x_max", 1), pstream__)), 
                            "assigning variable mu");
                current_statement_begin__ = 90;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            inv_logit((get_base1(beta_0, get_base1(species_int, n, "species_int", 1), "beta_0", 1) + (get_base1(beta_1, get_base1(species_int, n, "species_int", 1), "beta_1", 1) * get_base1(mu, n, "mu", 1)))), 
                            "assigning variable theta");
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t x_min_j_1_max__ = n_species;
                for (size_t j_1__ = 0; j_1__ < x_min_j_1_max__; ++j_1__) {
                    vars__.push_back(x_min(j_1__));
                }
                size_t x_max_j_1_max__ = n_species;
                for (size_t j_1__ = 0; j_1__ < x_max_j_1_max__; ++j_1__) {
                    vars__.push_back(x_max(j_1__));
                }
                size_t mu_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                size_t theta_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 142;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 143;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 145;
                if (as_bool(logical_eq(get_base1(y, n, "y", 1), 0))) {
                    current_statement_begin__ = 146;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                log_sum_exp(bernoulli_log(0, get_base1(theta, n, "theta", 1)), (bernoulli_log(1, get_base1(theta, n, "theta", 1)) + normal_log(get_base1(y, n, "y", 1), get_base1(mu, n, "mu", 1), (((1 + get_base1(mu, n, "mu", 1)) * 1) / get_base1(nu, get_base1(species_int, n, "species_int", 1), "nu", 1))))), 
                                "assigning variable log_lik");
                } else {
                    current_statement_begin__ = 153;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (bernoulli_log(1, get_base1(theta, n, "theta", 1)) + normal_log(get_base1(y, n, "y", 1), get_base1(mu, n, "mu", 1), (((1 + get_base1(mu, n, "mu", 1)) * 1) / get_base1(nu, get_base1(species_int, n, "species_int", 1), "nu", 1)))), 
                                "assigning variable log_lik");
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 142;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_perform";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t shape1_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t shape2_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t stretch_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < stretch_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "stretch" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t min_max_j_1_max__ = 2;
        size_t min_max_k_0_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < min_max_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < min_max_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "min_max" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t nu_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_stretch";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_min";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_nu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta1";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_0_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_1_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t x_min_j_1_max__ = n_species;
            for (size_t j_1__ = 0; j_1__ < x_min_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_min" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_max_j_1_max__ = n_species;
            for (size_t j_1__ = 0; j_1__ < x_max_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_max" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t shape1_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t shape2_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < shape2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t stretch_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < stretch_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "stretch" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t min_max_j_1_max__ = 2;
        size_t min_max_k_0_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < min_max_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < min_max_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "min_max" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t nu_j_1_max__ = n_species;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_stretch";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_min";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_nu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta1";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_0_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_1_k_0_max__ = n_species;
        for (size_t k_0__ = 0; k_0__ < beta_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t x_min_j_1_max__ = n_species;
            for (size_t j_1__ = 0; j_1__ < x_min_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_min" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_max_j_1_max__ = n_species;
            for (size_t j_1__ = 0; j_1__ < x_max_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_max" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef model_perform_namespace::model_perform stan_model;


#endif
