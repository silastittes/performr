/*
    performr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    performr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with performr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_perform_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_perform");
    reader.add_event(114, 114, "end", "model_perform");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
perform_mu(const T0__& xs,
               const T1__& shape1,
               const T2__& shape2,
               const T3__& stretch,
               const T4__& x_min,
               const T5__& x_max, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        fun_scalar_t__ x;
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,((xs - x_min) / (x_max - x_min)));


        current_statement_begin__ = 5;
        if (as_bool((primitive_value(logical_gt(x,0)) && primitive_value(logical_lt(x,1))))) {

            current_statement_begin__ = 6;
            return stan::math::promote_scalar<fun_return_scalar_t__>(((((log(stretch) + log(shape1)) + log(shape2)) + ((shape1 - 1) * log(x))) + ((shape2 - 1) * log1m(pow(x,shape1)))));
        } else {

            current_statement_begin__ = 12;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct perform_mu_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& xs,
               const T1__& shape1,
               const T2__& shape2,
               const T3__& stretch,
               const T4__& x_min,
               const T5__& x_max, std::ostream* pstream__) const {
        return perform_mu(xs, shape1, shape2, stretch, x_min, x_max, pstream__);
    }
};

#include <meta_header.hpp>
 class model_perform : public prob_grad {
private:
    int N;
    int numSpp;
    vector<int> sppint;
    vector<double> y;
    vector<double> x;
    double shape1_pr_mu;
    double shape1_pr_sig;
    double shape2_pr_mu;
    double shape2_pr_sig;
    double stretch_pr_mu;
    double stretch_pr_sig;
    double min_pr_mu;
    double min_pr_sig;
    double max_pr_mu;
    double max_pr_sig;
    double nu_pr_shape;
    double nu_pr_scale;
public:
    model_perform(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_perform(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_perform_namespace::model_perform";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "numSpp", "int", context__.to_vec());
            numSpp = int(0);
            vals_i__ = context__.vals_i("numSpp");
            pos__ = 0;
            numSpp = vals_i__[pos__++];
            current_statement_begin__ = 20;
            validate_non_negative_index("sppint", "N", N);
            context__.validate_dims("data initialization", "sppint", "int", context__.to_vec(N));
            validate_non_negative_index("sppint", "N", N);
            sppint = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("sppint");
            pos__ = 0;
            size_t sppint_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < sppint_limit_0__; ++i_0__) {
                sppint[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(N));
            validate_non_negative_index("x", "N", N);
            x = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                x[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "shape1_pr_mu", "double", context__.to_vec());
            shape1_pr_mu = double(0);
            vals_r__ = context__.vals_r("shape1_pr_mu");
            pos__ = 0;
            shape1_pr_mu = vals_r__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "shape1_pr_sig", "double", context__.to_vec());
            shape1_pr_sig = double(0);
            vals_r__ = context__.vals_r("shape1_pr_sig");
            pos__ = 0;
            shape1_pr_sig = vals_r__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "shape2_pr_mu", "double", context__.to_vec());
            shape2_pr_mu = double(0);
            vals_r__ = context__.vals_r("shape2_pr_mu");
            pos__ = 0;
            shape2_pr_mu = vals_r__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "shape2_pr_sig", "double", context__.to_vec());
            shape2_pr_sig = double(0);
            vals_r__ = context__.vals_r("shape2_pr_sig");
            pos__ = 0;
            shape2_pr_sig = vals_r__[pos__++];
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "stretch_pr_mu", "double", context__.to_vec());
            stretch_pr_mu = double(0);
            vals_r__ = context__.vals_r("stretch_pr_mu");
            pos__ = 0;
            stretch_pr_mu = vals_r__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "stretch_pr_sig", "double", context__.to_vec());
            stretch_pr_sig = double(0);
            vals_r__ = context__.vals_r("stretch_pr_sig");
            pos__ = 0;
            stretch_pr_sig = vals_r__[pos__++];
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "min_pr_mu", "double", context__.to_vec());
            min_pr_mu = double(0);
            vals_r__ = context__.vals_r("min_pr_mu");
            pos__ = 0;
            min_pr_mu = vals_r__[pos__++];
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "min_pr_sig", "double", context__.to_vec());
            min_pr_sig = double(0);
            vals_r__ = context__.vals_r("min_pr_sig");
            pos__ = 0;
            min_pr_sig = vals_r__[pos__++];
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "max_pr_mu", "double", context__.to_vec());
            max_pr_mu = double(0);
            vals_r__ = context__.vals_r("max_pr_mu");
            pos__ = 0;
            max_pr_mu = vals_r__[pos__++];
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "max_pr_sig", "double", context__.to_vec());
            max_pr_sig = double(0);
            vals_r__ = context__.vals_r("max_pr_sig");
            pos__ = 0;
            max_pr_sig = vals_r__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "nu_pr_shape", "double", context__.to_vec());
            nu_pr_shape = double(0);
            vals_r__ = context__.vals_r("nu_pr_shape");
            pos__ = 0;
            nu_pr_shape = vals_r__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "nu_pr_scale", "double", context__.to_vec());
            nu_pr_scale = double(0);
            vals_r__ = context__.vals_r("nu_pr_scale");
            pos__ = 0;
            nu_pr_scale = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;
            current_statement_begin__ = 20;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"sppint[k0__]",sppint[k0__],1);
            }
            current_statement_begin__ = 21;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            }
            current_statement_begin__ = 22;
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;
            current_statement_begin__ = 25;
            current_statement_begin__ = 26;
            current_statement_begin__ = 27;
            current_statement_begin__ = 28;
            current_statement_begin__ = 29;
            current_statement_begin__ = 30;
            current_statement_begin__ = 31;
            current_statement_begin__ = 32;
            current_statement_begin__ = 33;
            check_greater_or_equal(function__,"nu_pr_shape",nu_pr_shape,0);
            current_statement_begin__ = 34;
            check_greater_or_equal(function__,"nu_pr_scale",nu_pr_scale,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 41;
            validate_non_negative_index("shape1", "numSpp", numSpp);
            num_params_r__ += numSpp;
            current_statement_begin__ = 42;
            validate_non_negative_index("shape2", "numSpp", numSpp);
            num_params_r__ += numSpp;
            current_statement_begin__ = 43;
            validate_non_negative_index("stretch", "numSpp", numSpp);
            num_params_r__ += numSpp;
            current_statement_begin__ = 45;
            validate_non_negative_index("nu", "numSpp", numSpp);
            num_params_r__ += numSpp;
            current_statement_begin__ = 47;
            ++num_params_r__;
            current_statement_begin__ = 48;
            ++num_params_r__;
            current_statement_begin__ = 49;
            ++num_params_r__;
            current_statement_begin__ = 51;
            ++num_params_r__;
            current_statement_begin__ = 52;
            ++num_params_r__;
            current_statement_begin__ = 53;
            ++num_params_r__;
            current_statement_begin__ = 55;
            validate_non_negative_index("x_min", "numSpp", numSpp);
            num_params_r__ += numSpp;
            current_statement_begin__ = 56;
            validate_non_negative_index("x_max", "numSpp", numSpp);
            num_params_r__ += numSpp;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_perform() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("shape1")))
            throw std::runtime_error("variable shape1 missing");
        vals_r__ = context__.vals_r("shape1");
        pos__ = 0U;
        validate_non_negative_index("shape1", "numSpp", numSpp);
        context__.validate_dims("initialization", "shape1", "vector_d", context__.to_vec(numSpp));
        vector_d shape1(static_cast<Eigen::VectorXd::Index>(numSpp));
        for (int j1__ = 0U; j1__ < numSpp; ++j1__)
            shape1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(2,shape1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable shape1: ") + e.what());
        }

        if (!(context__.contains_r("shape2")))
            throw std::runtime_error("variable shape2 missing");
        vals_r__ = context__.vals_r("shape2");
        pos__ = 0U;
        validate_non_negative_index("shape2", "numSpp", numSpp);
        context__.validate_dims("initialization", "shape2", "vector_d", context__.to_vec(numSpp));
        vector_d shape2(static_cast<Eigen::VectorXd::Index>(numSpp));
        for (int j1__ = 0U; j1__ < numSpp; ++j1__)
            shape2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(2,shape2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable shape2: ") + e.what());
        }

        if (!(context__.contains_r("stretch")))
            throw std::runtime_error("variable stretch missing");
        vals_r__ = context__.vals_r("stretch");
        pos__ = 0U;
        validate_non_negative_index("stretch", "numSpp", numSpp);
        context__.validate_dims("initialization", "stretch", "vector_d", context__.to_vec(numSpp));
        vector_d stretch(static_cast<Eigen::VectorXd::Index>(numSpp));
        for (int j1__ = 0U; j1__ < numSpp; ++j1__)
            stretch(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,stretch);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable stretch: ") + e.what());
        }

        if (!(context__.contains_r("nu")))
            throw std::runtime_error("variable nu missing");
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "numSpp", numSpp);
        context__.validate_dims("initialization", "nu", "vector_d", context__.to_vec(numSpp));
        vector_d nu(static_cast<Eigen::VectorXd::Index>(numSpp));
        for (int j1__ = 0U; j1__ < numSpp; ++j1__)
            nu(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,nu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu: ") + e.what());
        }

        if (!(context__.contains_r("mu_shape1")))
            throw std::runtime_error("variable mu_shape1 missing");
        vals_r__ = context__.vals_r("mu_shape1");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_shape1", "double", context__.to_vec());
        double mu_shape1(0);
        mu_shape1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_shape1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_shape1: ") + e.what());
        }

        if (!(context__.contains_r("mu_shape2")))
            throw std::runtime_error("variable mu_shape2 missing");
        vals_r__ = context__.vals_r("mu_shape2");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_shape2", "double", context__.to_vec());
        double mu_shape2(0);
        mu_shape2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_shape2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_shape2: ") + e.what());
        }

        if (!(context__.contains_r("mu_stretch")))
            throw std::runtime_error("variable mu_stretch missing");
        vals_r__ = context__.vals_r("mu_stretch");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_stretch", "double", context__.to_vec());
        double mu_stretch(0);
        mu_stretch = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_stretch);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_stretch: ") + e.what());
        }

        if (!(context__.contains_r("mu_min")))
            throw std::runtime_error("variable mu_min missing");
        vals_r__ = context__.vals_r("mu_min");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_min", "double", context__.to_vec());
        double mu_min(0);
        mu_min = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_min);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_min: ") + e.what());
        }

        if (!(context__.contains_r("mu_max")))
            throw std::runtime_error("variable mu_max missing");
        vals_r__ = context__.vals_r("mu_max");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_max", "double", context__.to_vec());
        double mu_max(0);
        mu_max = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_max);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_max: ") + e.what());
        }

        if (!(context__.contains_r("mu_nu")))
            throw std::runtime_error("variable mu_nu missing");
        vals_r__ = context__.vals_r("mu_nu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_nu", "double", context__.to_vec());
        double mu_nu(0);
        mu_nu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,mu_nu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_nu: ") + e.what());
        }

        if (!(context__.contains_r("x_min")))
            throw std::runtime_error("variable x_min missing");
        vals_r__ = context__.vals_r("x_min");
        pos__ = 0U;
        validate_non_negative_index("x_min", "numSpp", numSpp);
        context__.validate_dims("initialization", "x_min", "vector_d", context__.to_vec(numSpp));
        vector_d x_min(static_cast<Eigen::VectorXd::Index>(numSpp));
        for (int j1__ = 0U; j1__ < numSpp; ++j1__)
            x_min(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(x_min);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x_min: ") + e.what());
        }

        if (!(context__.contains_r("x_max")))
            throw std::runtime_error("variable x_max missing");
        vals_r__ = context__.vals_r("x_max");
        pos__ = 0U;
        validate_non_negative_index("x_max", "numSpp", numSpp);
        context__.validate_dims("initialization", "x_max", "vector_d", context__.to_vec(numSpp));
        vector_d x_max(static_cast<Eigen::VectorXd::Index>(numSpp));
        for (int j1__ = 0U; j1__ < numSpp; ++j1__)
            x_max(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(x_max);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x_max: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  shape1;
            (void) shape1;  // dummy to suppress unused var warning
            if (jacobian__)
                shape1 = in__.vector_lb_constrain(2,numSpp,lp__);
            else
                shape1 = in__.vector_lb_constrain(2,numSpp);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  shape2;
            (void) shape2;  // dummy to suppress unused var warning
            if (jacobian__)
                shape2 = in__.vector_lb_constrain(2,numSpp,lp__);
            else
                shape2 = in__.vector_lb_constrain(2,numSpp);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  stretch;
            (void) stretch;  // dummy to suppress unused var warning
            if (jacobian__)
                stretch = in__.vector_lb_constrain(0,numSpp,lp__);
            else
                stretch = in__.vector_lb_constrain(0,numSpp);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  nu;
            (void) nu;  // dummy to suppress unused var warning
            if (jacobian__)
                nu = in__.vector_lb_constrain(0,numSpp,lp__);
            else
                nu = in__.vector_lb_constrain(0,numSpp);

            T__ mu_shape1;
            (void) mu_shape1;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_shape1 = in__.scalar_constrain(lp__);
            else
                mu_shape1 = in__.scalar_constrain();

            T__ mu_shape2;
            (void) mu_shape2;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_shape2 = in__.scalar_constrain(lp__);
            else
                mu_shape2 = in__.scalar_constrain();

            T__ mu_stretch;
            (void) mu_stretch;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_stretch = in__.scalar_constrain(lp__);
            else
                mu_stretch = in__.scalar_constrain();

            T__ mu_min;
            (void) mu_min;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_min = in__.scalar_constrain(lp__);
            else
                mu_min = in__.scalar_constrain();

            T__ mu_max;
            (void) mu_max;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_max = in__.scalar_constrain(lp__);
            else
                mu_max = in__.scalar_constrain();

            T__ mu_nu;
            (void) mu_nu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_nu = in__.scalar_lb_constrain(0,lp__);
            else
                mu_nu = in__.scalar_lb_constrain(0);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  x_min;
            (void) x_min;  // dummy to suppress unused var warning
            if (jacobian__)
                x_min = in__.vector_constrain(numSpp,lp__);
            else
                x_min = in__.vector_constrain(numSpp);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  x_max;
            (void) x_max;  // dummy to suppress unused var warning
            if (jacobian__)
                x_max = in__.vector_constrain(numSpp,lp__);
            else
                x_max = in__.vector_constrain(numSpp);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 74;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(N));
            (void) mu;  // dummy to suppress unused var warning

            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu,DUMMY_VAR__);


            current_statement_begin__ = 76;
            lp_accum__.add(normal_log<propto__>(mu_shape1, shape1_pr_mu, shape1_pr_sig));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(shape1, mu_shape1, 1));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(mu_shape2, shape2_pr_mu, shape2_pr_sig));
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log<propto__>(shape2, mu_shape2, 1));
            current_statement_begin__ = 82;
            lp_accum__.add(normal_log<propto__>(mu_stretch, stretch_pr_mu, stretch_pr_sig));
            current_statement_begin__ = 83;
            lp_accum__.add(normal_log<propto__>(stretch, mu_stretch, 1));
            current_statement_begin__ = 85;
            lp_accum__.add(normal_log<propto__>(mu_min, min_pr_mu, min_pr_sig));
            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(mu_max, max_pr_mu, max_pr_sig));
            current_statement_begin__ = 88;
            lp_accum__.add(normal_log<propto__>(mu_nu, nu_pr_scale, 1));
            current_statement_begin__ = 89;
            lp_accum__.add(gamma_log<propto__>(nu, nu_pr_shape, mu_nu));
            current_statement_begin__ = 91;
            lp_accum__.add(normal_log<propto__>(x_min, mu_min, 1));
            current_statement_begin__ = 92;
            lp_accum__.add(normal_log<propto__>(x_max, mu_max, 1));
            current_statement_begin__ = 101;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 102;
                stan::math::assign(get_base1_lhs(mu,n,"mu",1), exp(perform_mu(get_base1(x,n,"x",1),get_base1(shape1,get_base1(sppint,n,"sppint",1),"shape1",1),get_base1(shape2,get_base1(sppint,n,"sppint",1),"shape2",1),get_base1(stretch,get_base1(sppint,n,"sppint",1),"stretch",1),get_base1(x_min,get_base1(sppint,n,"sppint",1),"x_min",1),get_base1(x_max,get_base1(sppint,n,"sppint",1),"x_max",1), pstream__)));
                current_statement_begin__ = 110;
                lp_accum__.add(normal_log(get_base1(y,n,"y",1),get_base1(mu,n,"mu",1),get_base1(nu,get_base1(sppint,n,"sppint",1),"nu",1)));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("shape1");
        names__.push_back("shape2");
        names__.push_back("stretch");
        names__.push_back("nu");
        names__.push_back("mu_shape1");
        names__.push_back("mu_shape2");
        names__.push_back("mu_stretch");
        names__.push_back("mu_min");
        names__.push_back("mu_max");
        names__.push_back("mu_nu");
        names__.push_back("x_min");
        names__.push_back("x_max");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(numSpp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numSpp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numSpp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numSpp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numSpp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numSpp);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_perform_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d shape1 = in__.vector_lb_constrain(2,numSpp);
        vector_d shape2 = in__.vector_lb_constrain(2,numSpp);
        vector_d stretch = in__.vector_lb_constrain(0,numSpp);
        vector_d nu = in__.vector_lb_constrain(0,numSpp);
        double mu_shape1 = in__.scalar_constrain();
        double mu_shape2 = in__.scalar_constrain();
        double mu_stretch = in__.scalar_constrain();
        double mu_min = in__.scalar_constrain();
        double mu_max = in__.scalar_constrain();
        double mu_nu = in__.scalar_lb_constrain(0);
        vector_d x_min = in__.vector_constrain(numSpp);
        vector_d x_max = in__.vector_constrain(numSpp);
            for (int k_0__ = 0; k_0__ < numSpp; ++k_0__) {
            vars__.push_back(shape1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < numSpp; ++k_0__) {
            vars__.push_back(shape2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < numSpp; ++k_0__) {
            vars__.push_back(stretch[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < numSpp; ++k_0__) {
            vars__.push_back(nu[k_0__]);
            }
        vars__.push_back(mu_shape1);
        vars__.push_back(mu_shape2);
        vars__.push_back(mu_stretch);
        vars__.push_back(mu_min);
        vars__.push_back(mu_max);
        vars__.push_back(mu_nu);
            for (int k_0__ = 0; k_0__ < numSpp; ++k_0__) {
            vars__.push_back(x_min[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < numSpp; ++k_0__) {
            vars__.push_back(x_max[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_perform";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "stretch" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_stretch";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_min";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_nu";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_min" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_max" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "stretch" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_shape2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_stretch";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_min";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_nu";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_min" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numSpp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_max" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

}

typedef model_perform_namespace::model_perform stan_model;


#endif
